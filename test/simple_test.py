#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç C++ –º–æ–¥—É–ª—è –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞.
"""

import os
import sys
from datetime import UTC, datetime

import polars as pl

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))


def test_basic_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å C++ –º–æ–¥—É–ª—è."""
    print('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å C++ –º–æ–¥—É–ª—è...')

    try:
        import cpp_data_processor

        print('‚úÖ C++ –º–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')
    except ImportError as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ C++ –º–æ–¥—É–ª—è: {e}')
        return False

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    processor = cpp_data_processor.DataProcessor()
    print('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–∑–¥–∞–Ω')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    redis_connected = processor.is_redis_connected()
    print(
        f'üì° Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω" if redis_connected else "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"}'
    )

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = {
        'trade_id': [1, 2, 3, 4, 5],
        'price': [50000.0, 50100.0, 50050.0, 50200.0, 50150.0],
        'quantity': [0.1, 0.2, 0.15, 0.3, 0.25],
        'is_buy': [True, False, True, False, True],
        'datetime': [
            datetime(2024, 1, 1, 10, 0, 0, tzinfo=UTC),
            datetime(2024, 1, 1, 10, 1, 0, tzinfo=UTC),
            datetime(2024, 1, 1, 10, 2, 0, tzinfo=UTC),
            datetime(2024, 1, 1, 10, 3, 0, tzinfo=UTC),
            datetime(2024, 1, 1, 10, 4, 0, tzinfo=UTC),
        ],
    }

    df = pl.DataFrame(data)
    print(f'‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π DataFrame: {df.shape}')

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
    print('\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö...')
    try:
        result = processor.process_trades_data(cpp_data_processor.SymbolId.BTC_USDT, df)
        print(f'‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result.success}')
        if result.success:
            print(f'üìà –°–æ–æ–±—â–µ–Ω–∏–µ: {result.error_message}')
            print(f'‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.processing_time_seconds:.2f} —Å–µ–∫')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}')
        return False

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print('\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...')
    try:
        stats = processor.get_processing_stats()
        print(f'‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {stats}')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}')
        return False

    print('\nüéâ –í—Å–µ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!')
    return True


if __name__ == '__main__':
    success = test_basic_functionality()
    if success:
        print('\n‚úÖ C++ –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
        sys.exit(0)
    else:
        print('\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å C++ –º–æ–¥—É–ª–µ–º')
        sys.exit(1)

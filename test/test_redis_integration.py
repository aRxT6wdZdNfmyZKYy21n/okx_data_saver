#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Redis —Å C++ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö.
–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Python RedisDataService –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è DataFrame'–æ–≤.
"""

import os
import sys
from datetime import UTC, datetime

import polars as pl

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    import cpp_data_processor

    print('‚úÖ C++ –º–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')
except ImportError as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ C++ –º–æ–¥—É–ª—è: {e}')
    sys.exit(1)


def create_test_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–¥–µ–ª–∫–∞—Ö
    data = {
        'trade_id': [1, 2, 3, 4, 5],
        'price': [50000.0, 50100.0, 50050.0, 50200.0, 50150.0],
        'quantity': [0.1, 0.2, 0.15, 0.3, 0.25],
        'is_buy': [True, False, True, False, True],
        'datetime': [
            datetime(2024, 1, 1, 10, 0, 0, tzinfo=UTC),
            datetime(2024, 1, 1, 10, 1, 0, tzinfo=UTC),
            datetime(2024, 1, 1, 10, 2, 0, tzinfo=UTC),
            datetime(2024, 1, 1, 10, 3, 0, tzinfo=UTC),
            datetime(2024, 1, 1, 10, 4, 0, tzinfo=UTC),
        ],
    }

    df = pl.DataFrame(data)
    print(f'‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π DataFrame: {df.shape}')
    return df


def create_bollinger_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞."""
    data = {
        'upper_band': [50100.0, 50150.0, 50200.0, 50250.0, 50300.0],
        'middle_band': [50000.0, 50050.0, 50100.0, 50150.0, 50200.0],
        'lower_band': [49900.0, 49950.0, 50000.0, 50050.0, 50100.0],
    }

    df = pl.DataFrame(data)
    print(f'‚úÖ –°–æ–∑–¥–∞–Ω DataFrame –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞: {df.shape}')
    return df


def create_rsi_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è RSI."""
    data = {
        'rsi': [45.5, 52.3, 48.7, 55.2, 49.8],
    }

    df = pl.DataFrame(data)
    print(f'‚úÖ –°–æ–∑–¥–∞–Ω DataFrame RSI: {df.shape}')
    return df


def test_redis_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Redis."""
    print('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...')

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    processor = cpp_data_processor.DataProcessor()
    print('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–∑–¥–∞–Ω')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    if not processor.is_redis_connected():
        print('‚ùå Redis –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
        return False

    print('‚úÖ Redis –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω')

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö
    print('\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö...')
    trades_df = create_test_data()

    try:
        processor.save_results_to_redis(
            symbol_id=cpp_data_processor.SymbolId.BTC_USDT,
            data_type='trades',
            dataframe=trades_df,
        )
        print('‚úÖ –î–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö: {e}')
        return False

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö
    print('\nüì• –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö...')
    try:
        loaded_trades = processor.load_data_from_redis(
            symbol_id=cpp_data_processor.SymbolId.BTC_USDT, data_type='trades'
        )

        if loaded_trades is not None:
            print(f'‚úÖ –î–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–∞—Ö –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {loaded_trades.shape}')
        else:
            print('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö: {e}')
        return False

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
    print('\nüìà –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞...')
    bollinger_df = create_bollinger_data()

    try:
        processor.save_results_to_redis(
            symbol_id=cpp_data_processor.SymbolId.BTC_USDT,
            data_type='bollinger',
            dataframe=bollinger_df,
        )
        print('‚úÖ –ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞: {e}')
        return False

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
    print('\nüì• –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞...')
    try:
        loaded_bollinger = processor.load_data_from_redis(
            symbol_id=cpp_data_processor.SymbolId.BTC_USDT, data_type='bollinger'
        )

        if loaded_bollinger is not None:
            print(f'‚úÖ –ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {loaded_bollinger.shape}')
        else:
            print('‚ö†Ô∏è –ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞: {e}')
        return False

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ RSI
    print('\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ RSI...')
    rsi_df = create_rsi_data()

    try:
        processor.save_results_to_redis(
            symbol_id=cpp_data_processor.SymbolId.BTC_USDT,
            data_type='rsi',
            dataframe=rsi_df,
        )
        print('‚úÖ RSI –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è RSI: {e}')
        return False

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É RSI
    print('\nüì• –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É RSI...')
    try:
        loaded_rsi = processor.load_data_from_redis(
            symbol_id=cpp_data_processor.SymbolId.BTC_USDT, data_type='rsi'
        )

        if loaded_rsi is not None:
            print(f'‚úÖ RSI –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {loaded_rsi.shape}')
        else:
            print('‚ö†Ô∏è RSI –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ RSI: {e}')
        return False

    print('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!')
    return True


if __name__ == '__main__':
    success = test_redis_integration()
    if success:
        print('\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Redis —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
        sys.exit(0)
    else:
        print('\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Redis')
        sys.exit(1)
